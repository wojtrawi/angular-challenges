// Generated by Copilot
import { computed, inject } from '@angular/core';
import { tapResponse } from '@ngrx/operators';
import {
  patchState,
  signalStore,
  withComputed,
  withMethods,
} from '@ngrx/signals';
import {
  removeEntity,
  setAllEntities,
  setEntity,
  withEntities,
} from '@ngrx/signals/entities';
import { rxMethod } from '@ngrx/signals/rxjs-interop';
import { exhaustMap, pipe, tap } from 'rxjs';
import { withCallState } from './call-state';
import { Todo } from './todo.model';
import { TodoService } from './todo.service';
import { useGlobalErrorHandler } from './todo.utils';

export const TodoListStore = signalStore(
  withCallState(),
  withEntities<Todo>(),
  withComputed(({ ids }) => ({
    totalCount: computed(() => ids.length),
  })),

  withMethods(
    (
      store,
      todoService = inject(TodoService),
      globalErrorHandler = useGlobalErrorHandler(),
    ) => ({
      getAll: rxMethod<void>(
        pipe(
          tap(() => store._setLoading()),
          exhaustMap(() =>
            todoService.getAll().pipe(
              tapResponse({
                next: (todos) => {
                  patchState(store, setAllEntities(todos));
                  store._setLoaded();
                },
                error: () => globalErrorHandler('Failed to load todos'),
                finalize: () => store._setError('error'),
              }),
            ),
          ),
        ),
      ),
      updateOne(todo: Todo) {
        patchState(store, setEntity(todo));
      },
      removeOne(id: Todo['id']) {
        patchState(store, removeEntity(id));
      },
    }),
  ),
);
